// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String           @id @default(uuid())
  email        String        @unique
  name         String
  weight       Float?        // masa userului (kg)
  height       Float?        // înălțime (cm)
  activityLevel String?         // cât de activ e, ex: 1-5
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // relații
  friends      FriendRequest[] @relation("Friendships")
  friendOf     FriendRequest[] @relation("FriendshipsInverse")
  dailyLogs    DailyLog[]
}

model FriendRequest {
  id         String   @id @default(uuid())
  requester  User     @relation("Friendships", fields: [requesterId], references: [id])
  requesterId String
  receiver   User     @relation("FriendshipsInverse", fields: [receiverId], references: [id])
  receiverId String

  status     String   // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())

  @@unique([requesterId, receiverId])
}

model DailyLog {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime  // data calendaristică (poate începe în ziua aia)
  startTime    DateTime  // ora când a început activitatea
  endTime      DateTime  // ora când a terminat activitatea
  calories     Int       // calorii consumate în timpul ăsta
  workout      String    // descriere ce a făcut la sală

  createdAt    DateTime  @default(now())
}


